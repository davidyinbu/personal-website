{"version":3,"file":"static/js/890.2eb80721.chunk.js","mappings":"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","sources":["pages/DynamicTitle.js","pages/Index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = ['Hi', '你好', 'Hello', '嗨', 'Hola'];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst h1Style = {\n  margin: '10px',\n  fontSize: '2rem',\n};\n\nconst DynamicTitle = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(\n    () => {\n      let newIdx = idx;\n      let newChar = char;\n      if (char - hold >= messages[idx].length) {\n        newIdx += 1;\n        newChar = 0;\n      }\n      if (newIdx === messages.length) {\n        if (loopMessage) {\n          updateIter(0);\n          updateChar(0);\n        } else {\n          updateIter(0);\n          updateChar(0);\n          // setIsActive(true);\n        }\n      } else {\n        updateMessage(messages[newIdx].slice(0, newChar));\n        updateIter(newIdx);\n        updateChar(newChar + 1);\n      }\n    },\n    isActive ? delay : null,\n  );\n\n  return (\n    <header\n      title=\"about\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\n    >\n      <div>\n        <h1 align=\"center\" style={h1Style}>\n          {message}\n        </h1>\n      </div>\n    </header>\n  );\n};\n\nDynamicTitle.defaultProps = {\n  loopMessage: false,\n};\n\nDynamicTitle.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default DynamicTitle;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport DynamicTitle from './DynamicTitle';\n\nconst Index = () => (\n  <Main description={\"Dawei Yin's personal website.\"}>\n    <article className=\"post\" id=\"index\">\n      <header>\n        <div className=\"title\">\n          {/* <h2 data-testid=\"heading\">\n            <Link to=\"/\">About this site</Link>\n          </h2>\n          <p>\n            A beautiful, responsive, statically-generated, react application\n            written with modern Javascript.\n          </p> */}\n          <DynamicTitle />\n        </div>\n      </header>\n      <p>\n        {' '}\n        Welcome to my website. Please feel free to read more{' '}\n        <Link to=\"/about\">about me</Link>, or you can check out my{' '}\n        <Link to=\"/resume\">resume</Link>, <Link to=\"/projects\">projects</Link>,{' '}\n        view <Link to=\"/stats\">site statistics</Link>, or{' '}\n        <Link to=\"/contact\">contact</Link> me.\n      </p>\n    </article>\n  </Main>\n);\n\nexport default Index;\n"],"names":["messages","h1Style","margin","fontSize","DynamicTitle","_ref","loopMessage","text","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","_useState7","_useState8","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","length","slice","_jsx","title","style","test","color","onMouseEnter","onMouseLeave","children","align","defaultProps","Main","description","_jsxs","className","Link","to"],"sourceRoot":""}